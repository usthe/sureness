"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5617],{4137:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=u(n),g=a,m=d["".concat(c,".").concat(g)]||d[g]||p[g]||o;return n?r.createElement(m,s(s({ref:t},l),{},{components:n})):r.createElement(m,s({ref:t},l))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},32:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(7462),a=(n(7294),n(4137));const o={id:"sample-micronaut",title:"Using Sureness to protect the security of micronaut REST API",sidebar_label:"Micronaut-Sureness Sample"},s=void 0,i={unversionedId:"integrate/sample-micronaut",id:"integrate/sample-micronaut",title:"Using Sureness to protect the security of micronaut REST API",description:"Using Sureness to secure micronaut REST API by providing authentication(JWT,Basic,Digest) and authorization(RBAC)",source:"@site/docs/integrate/sample-micronaut.md",sourceDirName:"integrate",slug:"/integrate/sample-micronaut",permalink:"/sureness/docs/integrate/sample-micronaut",draft:!1,editUrl:"https://github.com/dromara/sureness/edit/master/home/docs/integrate/sample-micronaut.md",tags:[],version:"current",frontMatter:{id:"sample-micronaut",title:"Using Sureness to protect the security of micronaut REST API",sidebar_label:"Micronaut-Sureness Sample"},sidebar:"docs",previous:{title:"Ktor-Sureness Sample",permalink:"/sureness/docs/integrate/sample-ktor"},next:{title:"Design",permalink:"/sureness/docs/design"}},c={},u=[{value:"What You Will Learn",id:"what-you-will-learn",level:2},{value:"Setting Up Dependencies",id:"setting-up-dependencies",level:2},{value:"Setting Up Sureness",id:"setting-up-sureness",level:2},{value:"1.Run Micronaut Application",id:"1run-micronaut-application",level:4},{value:"2. Config Document Datasource - <code>sureness.yml</code>",id:"2-config-document-datasource---surenessyml",level:4},{value:"3. Add an Interceptor Intercepting All Requests",id:"3-add-an-interceptor-intercepting-all-requests",level:4},{value:"4. Last, Implement Auth Exception Handling Process",id:"4-last-implement-auth-exception-handling-process",level:4},{value:"Test",id:"test",level:2},{value:"Test Authentication",id:"test-authentication",level:3},{value:"1. Basic Auth Test",id:"1-basic-auth-test",level:4},{value:"Conclusion",id:"conclusion",level:2}],l={toc:u};function p(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Using Sureness to secure micronaut REST API by providing authentication(JWT,Basic,Digest) and authorization(RBAC)"),(0,a.kt)("h2",{id:"what-you-will-learn"},"What You Will Learn"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Creating a simple REST API using micronaut"),(0,a.kt)("li",{parentName:"ul"},"Learn how to integrate Sureness into a micronaut application"),(0,a.kt)("li",{parentName:"ul"},"Test API authentication - use JWT Auth, Basic Auth, Digest Auth to test the security of the REST API"),(0,a.kt)("li",{parentName:"ul"},"Test API authorization - use different users to verify that they can access the REST API")),(0,a.kt)("p",null,"The tutorial assumes that you know what  JWT, Basic Auth, Digest Auth, RBAC are. If you\ndo not, then you can check ",(0,a.kt)("a",{parentName:"p",href:"https://jwt.io/introduction/"},"jwt"),", ",(0,a.kt)("a",{parentName:"p",href:"https://docs.oracle.com/cd/E50612_01/doc.11122/user_guide/content/authn_http_basic.html"},"basic auth")," , ",(0,a.kt)("a",{parentName:"p",href:"https://docs.oracle.com/cd/E50612_01/doc.11122/user_guide/content/authn_http_digest.html"},"digest auth"),", ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Role-based_access_control"},"rbac")," for an introduction."),(0,a.kt)("h2",{id:"setting-up-dependencies"},"Setting Up Dependencies"),(0,a.kt)("p",null,"First, you will need to create a maven project and add micronautn, Sureness dependencies coordinate"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'\n    <properties>\n        <release.version>8</release.version>\n        <maven.compiler.source>1.8</maven.compiler.source>\n        <maven.compiler.target>1.8</maven.compiler.target>\n        <packaging>jar</packaging>\n        <jdk.version>1.8</jdk.version>\n        <micronaut.version>2.4.3</micronaut.version>\n        <micronaut-maven-plugin.version>1.1.8</micronaut-maven-plugin.version>\n        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>\n        <exec.mainClass>com.usthe.sureness.micronaut.Application</exec.mainClass>\n        <micronaut.runtime>netty</micronaut.runtime>\n    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>io.micronaut</groupId>\n                <artifactId>micronaut-bom</artifactId>\n                <version>${micronaut.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-simple</artifactId>\n            <version>1.7.30</version>\n        </dependency>\n        <dependency>\n            <groupId>com.usthe.sureness</groupId>\n            <artifactId>sureness-core</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.micronaut</groupId>\n            <artifactId>micronaut-inject</artifactId>\n            <scope>compile</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.micronaut</groupId>\n            <artifactId>micronaut-validation</artifactId>\n            <scope>compile</scope>\n        </dependency>\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-api</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-engine</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.micronaut.test</groupId>\n            <artifactId>micronaut-test-junit5</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.micronaut</groupId>\n            <artifactId>micronaut-http-client</artifactId>\n            <scope>compile</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.micronaut</groupId>\n            <artifactId>micronaut-http-server-netty</artifactId>\n            <scope>compile</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.micronaut</groupId>\n            <artifactId>micronaut-runtime</artifactId>\n            <scope>compile</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n\n        <plugins>\n            <plugin>\n                <groupId>io.micronaut.build</groupId>\n                <artifactId>micronaut-maven-plugin</artifactId>\n                <version>${micronaut-maven-plugin.version}</version>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>${maven-compiler-plugin.version}</version>\n                <configuration>\n                    <annotationProcessorPaths combine.children="append">\n                        <path>\n                            <groupId>io.micronaut</groupId>\n                            <artifactId>micronaut-inject-java</artifactId>\n                            <version>${micronaut.version}</version>\n                        </path>\n                        <path>\n                            <groupId>io.micronaut</groupId>\n                            <artifactId>micronaut-validation</artifactId>\n                            <version>${micronaut.version}</version>\n                        </path>\n                    </annotationProcessorPaths>\n                    <compilerArgs>\n                        <arg>-Amicronaut.processing.group=com.usthe.sureness</arg>\n                        <arg>-Amicronaut.processing.module=micronaut-sureness</arg>\n                    </compilerArgs>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n\n     \n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.micronaut.io/2.4.3/guide/index.html"},"User Guide")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.micronaut.io/2.4.3/api/index.html"},"API Reference")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.micronaut.io/2.4.3/guide/configurationreference.html"},"Configuration Reference")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://guides.micronaut.io/index.html"},"Micronaut Guides"))),(0,a.kt)("p",null,"We need to create a simple micronautn app and provide some  REST API for test."),(0,a.kt)("h2",{id:"setting-up-sureness"},"Setting Up Sureness"),(0,a.kt)("h4",{id:"1run-micronaut-application"},"1.Run Micronaut Application"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"  \nimport io.micronaut.runtime.Micronaut;\n\n\npublic class Application{\n\n    public static void main(String[] args) {\n        Micronaut.run(Application.class, args);\n\n    }\n}\n\n")),(0,a.kt)("h4",{id:"2-config-document-datasource---surenessyml"},"2. Config Document Datasource - ",(0,a.kt)("inlineCode",{parentName:"h4"},"sureness.yml")),(0,a.kt)("p",null,"Sureness authentication requires us to provide our own account data, role permission data. These data may come from document, databases,, annotations, etc. When we use sureness default configuration above, the datasource is document - ",(0,a.kt)("inlineCode",{parentName:"p"},"sureness.yml"),"."),(0,a.kt)("p",null,"Create a file named ",(0,a.kt)("inlineCode",{parentName:"p"},"sureness.yml")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," directory. Configure account data, role permission data in the ",(0,a.kt)("inlineCode",{parentName:"p"},"sureness.yml"),".  eg:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"## -- sureness.yml document dataSource-- ##\n\n# load api resource which need be protected, config role who can access these resource.\n# resources that are not configured are also authenticated and protected by default, but not authorized\n# eg: /api/v2/host===post===[role2,role3] means /api/v2/host===post can be access by role2,role3\n# eg: /api/v1/source2===get===[] means /api/v1/source2===get can not be access by any role\nresourceRole:\n  - /api/v1/source1===get===[role2]\n  - /api/v1/source1===post===[role1]\n  - /api/v1/source1===delete===[role3]\n  - /api/v1/source1===put===[role1,role2]\n  - /api/v1/source2===get===[]\n  - /api/v2/host===post===[role2,role3]\n  - /api/v2/host===get===[role2,role3]\n  - /api/v2/host===delete===[role2,role3]\n  - /api/v2/host===put===[role2,role3]\n  - /api/v3/*===*===[role1,role2,role3]\n\n# load api resource which do not need be protected, means them need be excluded.\n# these api resource can be access by everyone\nexcludedResource:\n  - /api/v3/host===get\n  - /**/*.html===get\n  - /**/*.js===get\n  - /**/*.css===get\n  - /**/*.ico===get\n\n# account info\n# there are three account: admin, root, tom\n# eg: admin has [role1,role2] ROLE, unencrypted password is admin, encrypted password is 0192023A7BBD73250516F069DF18B500\n# eg: root has role1, unencrypted password is 23456\n# eg: tom has role3, unencrypted password is 32113\naccount:\n  - appId: admin\n    # if add salt, the password is encrypted password - the result: MD5(password+salt)\n    # digest auth not support encrypted password\n    # if no salt, the password is unencrypted password\n    credential: 0192023A7BBD73250516F069DF18B500\n    salt: 123\n    role: [role1,role2]\n  - appId: root\n    credential: 23456\n    role: [role1,role2]\n  - appId: tom\n    credential: 32113\n    role: [role3]\n\n")),(0,a.kt)("h4",{id:"3-add-an-interceptor-intercepting-all-requests"},"3. Add an Interceptor Intercepting All Requests"),(0,a.kt)("p",null,"The essence of sureness is to intercept all rest requests for authenticating and authorizing.     The interceptor can be a filter or interceptor, it intercepts all request to check them. In Micronaut, we use Filter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@Filter("/**")\npublic class MicronautSurenessFilterExample  implements HttpServerFilter {\n\n    private static final Logger logger = LoggerFactory.getLogger(MicronautSurenessFilterExample.class);\n\n    @Inject\n    private SurenessSecurityManager securityManager ;\n\n\n    @Override\n    public Publisher<MutableHttpResponse<?>> doFilter(HttpRequest<?> request,\n                                                             ServerFilterChain chain) {\n        Integer statusCode = null;\n        String errorMsg = null;\n        try {\n            SubjectSum subject =securityManager.checkIn(request);\n            if (subject != null) {\n                SurenessContextHolder.bindSubject(subject);\n            }\n        } catch (ProcessorNotFoundException | UnknownAccountException | UnsupportedSubjectException e4) {\n            logger.debug("this request is illegal");\n            statusCode = HttpStatus.BAD_REQUEST.getCode();\n            errorMsg = e4.getMessage();\n        } catch (DisabledAccountException | ExcessiveAttemptsException e2 ) {\n            logger.debug("the account is disabled");\n            statusCode = HttpStatus.FORBIDDEN.getCode();\n            errorMsg = e2.getMessage();\n        } catch (IncorrectCredentialsException | ExpiredCredentialsException e3) {\n            logger.debug("this account credential is incorrect or expired");\n            statusCode = HttpStatus.FORBIDDEN.getCode();\n            errorMsg = e3.getMessage();\n        } catch (UnauthorizedException e5) {\n            logger.debug("this account can not access this resource");\n            statusCode = HttpStatus.FORBIDDEN.getCode();\n            errorMsg = e5.getMessage();\n        } catch (RuntimeException e) {\n            logger.error("other exception happen: ", e);\n            statusCode = HttpStatus.FORBIDDEN.getCode();\n            errorMsg = e.getMessage();\n        }\n        if (statusCode != null && errorMsg != null) {\n            String finalErrorMsg = errorMsg;\n            Integer finalStatusCode = statusCode;\n            logger.info(statusCode+"---\x3e"+errorMsg);\n            try {\n                URI location = new URI("/auth/error");\n                request = request.mutate().headers(httpHeaders -> {\n                    httpHeaders.add("statusCode", String.valueOf(finalStatusCode));\n                    httpHeaders.add("errorMsg", finalErrorMsg);\n                }).uri(location);\n            }catch (URISyntaxException e){\n                logger.error("uri error");\n            }\n        }\n        return chain.proceed(request);\n    }\n\n\n\n    @Override\n    public int getOrder() {\n        return ServerFilterPhase.SECURITY.order();\n    }\n\n\n}\n')),(0,a.kt)("p",null,"SurenessSecurityManager configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import io.micronaut.context.annotation.Factory;\n\n@Factory\npublic class SurenessConfiguration {\n    private static final Logger logger = LoggerFactory.getLogger(SurenessConfiguration.class);\n\n    @Factory\n    public SurenessSecurityManager init() {\n        SurenessAccountProvider accountProvider = new DocumentAccountProvider();\n        List<Processor> processorList = new LinkedList<>();\n        NoneProcessor noneProcessor = new NoneProcessor();\n        processorList.add(noneProcessor);\n        PasswordProcessor passwordProcessor = new PasswordProcessor();\n        passwordProcessor.setAccountProvider(accountProvider);\n        processorList.add(passwordProcessor);\n        DefaultProcessorManager processorManager = new DefaultProcessorManager(processorList);\n        if (logger.isDebugEnabled()) {\n            logger.debug("DefaultProcessorManager init");\n        }\n        PathTreeProvider pathTreeProvider = new DocumentPathTreeProvider();\n        DefaultPathRoleMatcher pathRoleMatcher = new DefaultPathRoleMatcher();\n        pathRoleMatcher.setPathTreeProvider(pathTreeProvider);\n        pathRoleMatcher.buildTree();\n        if (logger.isDebugEnabled()) {\n            logger.debug("DefaultPathRoleMatcher init");\n        }\n\n        // SubjectFactory init\n        SubjectFactory subjectFactory = new SurenessSubjectFactory();\n        List<SubjectCreate> subjectCreates = Arrays.asList(\n                new NoneSubjectReactiveCreator(),\n                new BasicSubjectReactiveCreator());\n        subjectFactory.registerSubjectCreator(subjectCreates);\n        if (logger.isDebugEnabled()) {\n            logger.debug("SurenessSubjectFactory init");\n        }\n\n        // surenessSecurityManager init\n        SurenessSecurityManager securityManager = SurenessSecurityManager.getInstance();\n        securityManager.setPathRoleMatcher(pathRoleMatcher);\n        securityManager.setSubjectFactory(subjectFactory);\n        securityManager.setProcessorManager(processorManager);\n        if (logger.isDebugEnabled()) {\n            logger.debug("SurenessSecurityManager init");\n        }\n        return securityManager;\n    }\n\n}\n\n\n')),(0,a.kt)("h4",{id:"4-last-implement-auth-exception-handling-process"},"4. Last, Implement Auth Exception Handling Process"),(0,a.kt)("p",null,"Sureness uses exception handling process:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If auth success, method - ",(0,a.kt)("inlineCode",{parentName:"li"},"checkIn()")," will return a ",(0,a.kt)("inlineCode",{parentName:"li"},"SubjectSum")," object containing user information."),(0,a.kt)("li",{parentName:"ul"},"If auth failure, method - ",(0,a.kt)("inlineCode",{parentName:"li"},"checkIn()")," will throw different types of auth exceptions.")),(0,a.kt)("p",null,"We need to continue the subsequent process based on these exceptions.(eg: return the request response)"),(0,a.kt)("p",null,"Here we need to customize the exceptions thrown by ",(0,a.kt)("inlineCode",{parentName:"p"},"checkIn"),", passed directly when auth success, catch exception when auth failure and do something:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'// when auth error , add error msg to HttpRequest\n   if (statusCode != null && errorMsg != null) {\n            String finalErrorMsg = errorMsg;\n            Integer finalStatusCode = statusCode;\n            logger.info(statusCode+"---\x3e"+errorMsg);\n            try {\n                URI location = new URI("/auth/error");\n                request = request.mutate().headers(httpHeaders -> {\n                    httpHeaders.add("statusCode", String.valueOf(finalStatusCode));\n                    httpHeaders.add("errorMsg", finalErrorMsg);\n                }).uri(location);\n            }catch (URISyntaxException e){\n                logger.error("uri error");\n            }\n        } \n\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"All done, we can test now!")),(0,a.kt)("h2",{id:"test"},"Test"),(0,a.kt)("p",null,"Through the above steps, a complete auth function project is completed. Someone maybe think that with only these few steps, where is its complete function and what can it support?",(0,a.kt)("br",{parentName:"p"}),"\n","This built project is based on the RBAC permission model and supports Baisc authentication, Digest authentication and JWT authentication. It can fine-grained control the user's access to the restful api provided by the Javalin. That is to control which users can access which api."),(0,a.kt)("p",null,"Let's test it. (we use postman and chrome to test.)"),(0,a.kt)("h3",{id:"test-authentication"},"Test Authentication"),(0,a.kt)("h4",{id:"1-basic-auth-test"},"1. Basic Auth Test"),(0,a.kt)("p",null,"Use postman Basic auth, as shown below:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"success - input username: admin, password: admin")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"success",src:n(5642).Z,width:"784",height:"568"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"fail - input username: admin, password: admin1234")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"fail",src:n(8627).Z,width:"848",height:"593"})),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"micronaut is a framework dedicated to simplicity and ease of use, and so is Sureness.",(0,a.kt)("br",{parentName:"p"}),"\n","We hope you enjoy this tutorial. Of course, the tutorial only introduces a simple introduction. Our account data, role permission data can not only be written in ",(0,a.kt)("inlineCode",{parentName:"p"},"sureness.yml"),", but also loaded and obtained from the database and annotations. We can also customize the authentication method, data source, etc.",(0,a.kt)("br",{parentName:"p"}),"\n","Finally, thank you again for reading."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/usthe/sureness/tree/master/samples/javalin-sureness"},"DEMO SOURCE CODE ON GITHUB")))}p.isMDXComponent=!0},8627:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/error-d143a3b62627677352d3ca8ca6ba2527.png"},5642:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/success-566c8b8e44aa014636b5ce56cef43aef.png"}}]);