"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6312],{4163:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2021/06/06/step-by-step","metadata":{"permalink":"/sureness/zh-cn/blog/2021/06/06/step-by-step","editUrl":"https://github.com/dromara/sureness/edit/master/home/i18n/zh-cn/docusaurus-plugin-content-blog/2021-06-06-step-by-step.md","source":"@site/i18n/zh-cn/docusaurus-plugin-content-blog/2021-06-06-step-by-step.md","title":"\u4f7f\u7528Sureness\u4e00\u6b65\u4e00\u6b65\u642d\u5efa\u4e00\u4e2a\u5b8c\u6574\u8ba4\u8bc1\u9274\u6743\u9879\u76ee","description":"\u4e0b\u9762\u6211\u4eec\u6765\u4e00\u6b65\u4e00\u6b65\u57fa\u4e8espringboot,sureness\u642d\u5efa\u4e00\u4e2a\u5982\u4e0b\u529f\u80fd\u7684\u8ba4\u8bc1\u9274\u6743\u7cfb\u7edf\u3002","date":"2021-06-06T00:00:00.000Z","formattedDate":"2021\u5e746\u67086\u65e5","tags":[{"label":"integrate","permalink":"/sureness/zh-cn/blog/tags/integrate"},{"label":"startup","permalink":"/sureness/zh-cn/blog/tags/startup"}],"readingTime":11.25,"hasTruncateMarker":true,"authors":[{"name":"tom","title":"Java Engineer","url":"https://github.com/tomsun28","imageURL":"https://avatars.githubusercontent.com/u/24788200?s=400&v=4"}],"frontMatter":{"title":"\u4f7f\u7528Sureness\u4e00\u6b65\u4e00\u6b65\u642d\u5efa\u4e00\u4e2a\u5b8c\u6574\u8ba4\u8bc1\u9274\u6743\u9879\u76ee","author":"tom","author_title":"Java Engineer","author_url":"https://github.com/tomsun28","author_image_url":"https://avatars.githubusercontent.com/u/24788200?s=400&v=4","tags":["integrate","startup"]},"nextItem":{"title":"Using Sureness to secure micronaut REST API","permalink":"/sureness/zh-cn/blog/2021/04/29/sample-micronaut"}},"content":"\u4e0b\u9762\u6211\u4eec\u6765\u4e00\u6b65\u4e00\u6b65\u57fa\u4e8espringboot,sureness\u642d\u5efa\u4e00\u4e2a\u5982\u4e0b\u529f\u80fd\u7684\u8ba4\u8bc1\u9274\u6743\u7cfb\u7edf\u3002  \\n\\n1. \u4f7f\u7528\u4e86\u914d\u7f6e\u6587\u4ef6\u6765\u4f5c\u4e3a\u7cfb\u7edf\u7684\u8d26\u6237\u6570\u636e\u548c\u6743\u9650\u6570\u636e\u7684\u6570\u636e\u6e90\u3002   \\n2. \u7cfb\u7edf\u57fa\u4e8erbac\u6743\u9650\u6a21\u578b\uff0c\u652f\u6301basic\u8ba4\u8bc1\uff0cdigest\u8ba4\u8bc1\uff0cjwt\u8ba4\u8bc1\u3002  \\n3. \u80fd\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\u7528\u6237\u5bf9\u7cfb\u7edf\u63d0\u4f9b\u7684restful api\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u5373\u54ea\u4e9b\u7528\u6237\u80fd\u8bbf\u95ee\u54ea\u4e9bapi\u3002  \\n\\n\x3c!--truncate--\x3e\\n\\n\u591a\u8bf4\u65e0\u76ca\uff0c\u5feb\u901f\u5f00\u59cb\uff01  \\n\\n\u8fd9\u91cc\u4e3a\u4e86\u7167\u987e\u5230\u521a\u5165\u95e8\u7684\u540c\u5b66\uff0c\u56fe\u6587\u5c55\u793a\u4e86\u6bcf\u4e00\u6b65\u64cd\u4f5c\u3002\u6709\u57fa\u7840\u53ef\u76f4\u63a5\u7565\u8fc7\u3002  \\n\\n### \u521d\u59cb\u5316\u4e00\u4e2aspringboot web\u5de5\u7a0b  \\n\\n\u5728IDEA\u5982\u4e0b\u64cd\u4f5c:  \\n\\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c2bc0a723ea74c86a75952cc486367cb~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00d3cd3a015b4a079c0b30da064139d0~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3be963ed9c28493d9ddc3b48caab54af~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2bcce3d56cb244b6967914a5b9b807c5~tplv-k3u1fbpfcp-zoom-1.image)\\n \\n\\n### \u63d0\u4f9b\u4e00\u4e9b\u6a21\u62df\u7684restful api     \\n\\n\u65b0\u5efa\u4e00\u4e2acontroller, \u5728\u91cc\u9762\u5b9e\u73b0\u4e00\u4e9b\u7b80\u5355\u7684restful api\u4f9b\u5916\u90e8\u6d4b\u8bd5\u8c03\u7528  \\n\\n````\\n/**\\n * simulate api controller, for testing\\n * @author tomsun28\\n * @date 17:35 2019-05-12\\n */\\n@RestController\\npublic class SimulateController {\\n\\n    /** access success message **/\\n    public static final String SUCCESS_ACCESS_RESOURCE = \\"access this resource success\\";\\n\\n    @GetMapping(\\"/api/v1/source1\\")\\n    public ResponseEntity<String> api1Mock1() {\\n        return ResponseEntity.ok(SUCCESS_ACCESS_RESOURCE);\\n    }\\n\\n    @PutMapping(\\"/api/v1/source1\\")\\n    public ResponseEntity<String> api1Mock3() {\\n        return ResponseEntity.ok(SUCCESS_ACCESS_RESOURCE);\\n    }\\n\\n    @DeleteMapping(\\"/api/v1/source1\\")\\n    public ResponseEntity<String> api1Mock4() {\\n        return ResponseEntity.ok(SUCCESS_ACCESS_RESOURCE);\\n    }\\n\\n    @GetMapping(\\"/api/v1/source2\\")\\n    public ResponseEntity<String> api1Mock5() {\\n        return ResponseEntity.ok(SUCCESS_ACCESS_RESOURCE);\\n    }\\n\\n    @GetMapping(\\"/api/v1/source2/{var1}/{var2}\\")\\n    public ResponseEntity<String> api1Mock6(@PathVariable String var1, @PathVariable Integer var2 ) {\\n        return ResponseEntity.ok(SUCCESS_ACCESS_RESOURCE);\\n    }\\n\\n    @PostMapping(\\"/api/v2/source3/{var1}\\")\\n    public ResponseEntity<String> api1Mock7(@PathVariable String var1) {\\n        return ResponseEntity.ok(SUCCESS_ACCESS_RESOURCE);\\n    }\\n\\n    @GetMapping(\\"/api/v1/source3\\")\\n    public ResponseEntity<String> api1Mock11(HttpServletRequest request) {\\n        return ResponseEntity.ok(SUCCESS_ACCESS_RESOURCE);\\n    }\\n\\n    @GetMapping(\\"/api/v2/source2\\")\\n    public ResponseEntity<String> api1Mock12() {\\n        return ResponseEntity.ok(SUCCESS_ACCESS_RESOURCE);\\n    }\\n\\n}\\n````\\n\\n### \u9879\u76ee\u4e2d\u52a0\u5165sureness\u4f9d\u8d56     \\n\\n\u5728\u9879\u76ee\u7684pom.xml\u52a0\u5165sureness\u7684maven\u4f9d\u8d56\u5750\u6807    \\n```\\n<dependency>\\n    <groupId>com.usthe.sureness</groupId>\\n    <artifactId>sureness-core</artifactId>\\n    <version>1.0.3</version>\\n</dependency>\\n```\\n\u5982\u4e0b\uff1a  \\n\\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c0df60e4bae4d4b80c0209f461fc8b5~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n\\n### \u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e\u6765\u914d\u7f6esureness       \\n\\n\u65b0\u5efa\u4e00\u4e2a\u914d\u7f6e\u7c7b\uff0c\u521b\u5efa\u5bf9\u5e94\u7684sureness\u9ed8\u8ba4\u914d\u7f6ebean  \\nsureness\u9ed8\u8ba4\u914d\u7f6e\u4f7f\u7528\u4e86\u6587\u4ef6\u6570\u636e\u6e90`sureness.yml`\u4f5c\u4e3a\u8d26\u6237\u6743\u9650\u6570\u636e\u6e90  \\n\u9ed8\u8ba4\u914d\u7f6e\u652f\u6301\u4e86`jwt, basic auth, digest auth`\u8ba4\u8bc1  \\n```\\n@Configuration\\npublic class SurenessConfiguration {\\n\\n    /**\\n     * sureness default config bean\\n     * @return default config bean\\n     */\\n    @Bean\\n    public DefaultSurenessConfig surenessConfig() {\\n        return new DefaultSurenessConfig();\\n    }\\n\\n}\\n```\\n\\n### \u914d\u7f6e\u9ed8\u8ba4\u6587\u672c\u914d\u7f6e\u6570\u636e\u6e90      \\n\\n\u8ba4\u8bc1\u9274\u6743\u5f53\u7136\u4e5f\u9700\u8981\u6211\u4eec\u81ea\u5df1\u7684\u914d\u7f6e\u6570\u636e:\u8d26\u6237\u6570\u636e\uff0c\u89d2\u8272\u6743\u9650\u6570\u636e\u7b49  \\n\u8fd9\u4e9b\u914d\u7f6e\u6570\u636e\u53ef\u80fd\u6765\u81ea\u6587\u672c\uff0c\u5173\u7cfb\u6570\u636e\u5e93\uff0c\u975e\u5173\u7cfb\u6570\u636e\u5e93  \\n\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u9ed8\u8ba4\u7684\u6587\u672c\u5f62\u5f0f\u914d\u7f6e - sureness.yml, \u5728resource\u8d44\u6e90\u76ee\u5f55\u4e0b\u521b\u5efasureness.yml\u6587\u4ef6  \\n\u5728sureness.yml\u6587\u4ef6\u91cc\u914d\u7f6e\u6211\u4eec\u7684\u89d2\u8272\u6743\u9650\u6570\u636e\u548c\u8d26\u6237\u6570\u636e\uff0c\u5982\u4e0b\uff1a  \\n\\n````\\n## -- sureness.yml\u6587\u672c\u6570\u636e\u6e90 -- ##\\n\\n# \u52a0\u8f7d\u5230\u5339\u914d\u5b57\u5178\u7684\u8d44\u6e90,\u4e5f\u5c31\u662f\u9700\u8981\u88ab\u4fdd\u62a4\u7684,\u8bbe\u7f6e\u4e86\u6240\u652f\u6301\u89d2\u8272\u8bbf\u95ee\u7684\u8d44\u6e90\\n# \u6ca1\u6709\u914d\u7f6e\u7684\u8d44\u6e90\u4e5f\u9ed8\u8ba4\u88ab\u8ba4\u8bc1\u4fdd\u62a4,\u4f46\u4e0d\u9274\u6743\uff0c\u4f8b\u5982/api/v1/source2===get\\n# eg: /api/v1/source1===get===[role2] \u8868\u793a /api/v1/source1===get \u8fd9\u6761\u8d44\u6e90\u652f\u6301 role2\u8fd9\u4e00\u79cd\u89d2\u8272\u8bbf\u95ee\\n# eg: /api/v2/source2===get===[] \u8868\u793a /api/v1/source2===get \u8fd9\u6761\u8d44\u6e90\u4e0d\u652f\u6301\u4efb\u4f55\u89d2\u8272\u8bbf\u95ee\\nresourceRole:\\n  - /api/v1/source1===get===[role2]\\n  - /api/v1/source1===delete===[role3]\\n  - /api/v1/source1===put===[role1,role2]\\n  - /api/v2/source2===get===[]\\n  - /api/v1/source2/*/*===get===[role2]\\n  - /api/v2/source3/*===get===[role2]\\n\\n# \u9700\u8981\u88ab\u8fc7\u6ee4\u4fdd\u62a4\u7684\u8d44\u6e90,\u4e0d\u8ba4\u8bc1\u9274\u6743\u76f4\u63a5\u8bbf\u95ee\\n# /api/v1/source3===get \u8868\u793a /api/v1/source3===get \u53ef\u4ee5\u88ab\u4efb\u4f55\u4eba\u8bbf\u95ee \u65e0\u9700\u767b\u5f55\u8ba4\u8bc1\u9274\u6743\\nexcludedResource:\\n  - /api/v1/account/auth===post\\n  - /api/v1/source3===get\\n  - /**/*.html===get\\n  - /**/*.js===get\\n  - /**/*.css===get\\n  - /**/*.ico===get\\n\\n# \u7528\u6237\u8d26\u6237\u4fe1\u606f\\n# \u4e0b\u9762\u6709 admin root tom\u4e09\u4e2a\u8d26\u6237\\n# eg: admin \u62e5\u6709[role1,role2]\u89d2\u8272,\u660e\u6587\u5bc6\u7801\u4e3aadmin,\u52a0\u76d0\u5bc6\u7801\u4e3a0192023A7BBD73250516F069DF18B500\\n# eg: root \u62e5\u6709[role1],\u5bc6\u7801\u4e3a\u660e\u658723456\\n# eg: tom \u62e5\u6709[role3],\u5bc6\u7801\u4e3a\u660e\u658732113\\naccount:\\n  - appId: admin\\n    # \u5982\u679c\u586b\u5199\u4e86\u52a0\u5bc6\u76d0--salt,\u5219credential\u4e3aMD5(password+salt)\u768432\u4f4d\u7ed3\u679c\\n    # \u6ca1\u6709\u76d0\u8ba4\u4e3a\u4e0d\u52a0\u5bc6,credential\u4e3a\u660e\u6587\\n    # \u82e5\u5bc6\u7801\u52a0\u76d0 \u5219digest\u8ba4\u8bc1\u4e0d\u652f\u6301  \\n    credential: 0192023A7BBD73250516F069DF18B500\\n    salt: 123\\n    role: [role1,role2]\\n  - appId: root\\n    credential: 23456\\n    role: [role1]\\n  - appId: tom\\n    credential: 32113\\n    role: [role3]\\n\\n````\\n\\n### \u6dfb\u52a0\u8fc7\u6ee4\u5668\u62e6\u622a\u6240\u6709\u8bf7\u6c42,\u5bf9\u6240\u6709\u8bf7\u6c42\u8fdb\u884c\u8ba4\u8bc1\u9274\u6743         \\n\\n\u65b0\u5efa\u4e00\u4e2afilter, \u62e6\u622a\u6240\u6709\u8bf7\u6c42\uff0c\u7528sureness\u5bf9\u6240\u6709\u8bf7\u6c42\u8fdb\u884c\u8ba4\u8bc1\u9274\u6743\u3002\u8ba4\u8bc1\u9274\u6743\u5931\u8d25\u7684\u8bf7\u6c42sureness\u4f1a\u629b\u51fa\u5bf9\u5e94\u7684\u5f02\u5e38\uff0c\u6211\u4eec\u6355\u83b7\u54cd\u5e94\u7684\u5f02\u5e38\u8fdb\u884c\u5904\u7406\u8fd4\u56deresponse\u5373\u53ef\u3002  \\n\\n````\\n@Order(1)\\n@WebFilter(filterName = \\"SurenessFilterExample\\", urlPatterns = \\"/*\\", asyncSupported = true)\\npublic class SurenessFilterExample implements Filter {\\n\\n    @Override\\n    public void init(FilterConfig filterConfig) {}\\n\\n    @Override\\n    public void destroy() {}\\n\\n    @Override\\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)\\n            throws IOException, ServletException {\\n\\n        try {\\n            SubjectSum subject = SurenessSecurityManager.getInstance().checkIn(servletRequest);\\n            // \u8ba4\u8bc1\u9274\u6743\u6210\u529f\u5219\u4f1a\u8fd4\u56de\u5e26\u7528\u6237\u4fe1\u606f\u7684subject \u53ef\u4ee5\u5c06subject\u4fe1\u606f\u7ed1\u5b9a\u5230\u5f53\u524d\u7ebf\u7a0b\u4e0a\u4e0b\u6587holder\u4f9b\u540e\u9762\u4f7f\u7528\\n            if (subject != null) {\\n                SurenessContextHolder.bindSubject(subject);\\n            }\\n        } catch (ProcessorNotFoundException | UnknownAccountException | UnsupportedSubjectException e4) {\\n            // \u8d26\u6237\u521b\u5efa\u76f8\u5173\u5f02\u5e38\\n            responseWrite(ResponseEntity\\n                    .status(HttpStatus.BAD_REQUEST).body(e4.getMessage()), servletResponse);\\n            return;\\n        } catch (DisabledAccountException | ExcessiveAttemptsException e2 ) {\\n            // \u8d26\u6237\u7981\u7528\u76f8\u5173\u5f02\u5e38\\n            responseWrite(ResponseEntity\\n                    .status(HttpStatus.UNAUTHORIZED).body(e2.getMessage()), servletResponse);\\n            return;\\n        } catch (IncorrectCredentialsException | ExpiredCredentialsException e3) {\\n            // \u8ba4\u8bc1\u5931\u8d25\u76f8\u5173\u5f02\u5e38\\n            responseWrite(ResponseEntity\\n                    .status(HttpStatus.UNAUTHORIZED).body(e3.getMessage()), servletResponse);\\n            return;\\n        } catch (NeedDigestInfoException e5) {\\n            // digest\u8ba4\u8bc1\u9700\u8981\u91cd\u8bd5\u5f02\u5e38\\n            responseWrite(ResponseEntity\\n                    .status(HttpStatus.UNAUTHORIZED)\\n                    .header(\\"WWW-Authenticate\\", e5.getAuthenticate()).build(), servletResponse);\\n            return;\\n        } catch (UnauthorizedException e6) {\\n            // \u9274\u6743\u5931\u8d25\u76f8\u5173\u5f02\u5e38\uff0c\u5373\u65e0\u6743\u8bbf\u95ee\u6b64api\\n            responseWrite(ResponseEntity\\n                    .status(HttpStatus.FORBIDDEN).body(e6.getMessage()), servletResponse);\\n            return;\\n        } catch (RuntimeException e) {\\n            // \u5176\u4ed6\u5f02\u5e38\\n            responseWrite(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(),\\n                    servletResponse);\\n            return;\\n        }\\n        try {\\n            // \u82e5\u672a\u629b\u51fa\u5f02\u5e38 \u5219\u8ba4\u8bc1\u9274\u6743\u6210\u529f \u7ee7\u7eed\u4e0b\u9762\u8bf7\u6c42\u6d41\u7a0b\\n            filterChain.doFilter(servletRequest, servletResponse);\\n        } finally {\\n            SurenessContextHolder.clear();\\n        }\\n    }\\n\\n    /**\\n     * write response json data\\n     * @param content content\\n     * @param response response\\n     */\\n    private static void responseWrite(ResponseEntity content, ServletResponse response) {\\n        response.setCharacterEncoding(\\"UTF-8\\");\\n        response.setContentType(\\"application/json;charset=utf-8\\");\\n        ((HttpServletResponse)response).setStatus(content.getStatusCodeValue());\\n        content.getHeaders().forEach((key, value) ->\\n                ((HttpServletResponse) response).addHeader(key, value.get(0)));\\n        try (PrintWriter printWriter = response.getWriter()) {\\n            if (content.getBody() != null) {\\n                if (content.getBody() instanceof String) {\\n                    printWriter.write(content.getBody().toString());\\n                } else {\\n                    ObjectMapper objectMapper = new ObjectMapper();\\n                    printWriter.write(objectMapper.writeValueAsString(content.getBody()));\\n                }\\n            } else {\\n                printWriter.flush();\\n            }\\n        } catch (IOException e) {}\\n    }\\n}\\n\\n````\\n\\n\u50cf\u4e0a\u9762\u4e00\u6837\uff0c\\n1. \u82e5\u8ba4\u8bc1\u9274\u6743\u6210\u529f,`checkIn`\u4f1a\u8fd4\u56de\u5305\u542b\u7528\u6237\u4fe1\u606f\u7684`SubjectSum`\u5bf9\u8c61  \\n2. \u82e5\u4e2d\u95f4\u8ba4\u8bc1\u9274\u6743\u5931\u8d25\uff0c`checkIn`\u4f1a\u629b\u51fa\u4e0d\u540c\u7c7b\u578b\u7684\u8ba4\u8bc1\u9274\u6743\u5f02\u5e38,\u7528\u6237\u9700\u6839\u636e\u8fd9\u4e9b\u5f02\u5e38\u6765\u7ee7\u7eed\u540e\u9762\u7684\u6d41\u7a0b(\u8fd4\u56de\u76f8\u5e94\u7684\u8bf7\u6c42\u54cd\u5e94)\\n\\n\u4e3a\u4e86\u4f7ffilter\u5728springboot\u751f\u6548 \u9700\u8981\u5728boot\u542f\u52a8\u7c7b\u52a0\u6ce8\u89e3 `@ServletComponentScan`   \\n\\n````\\n@SpringBootApplication\\n@ServletComponentScan\\npublic class BootstrapApplication {\\n\\n    public static void main(String[] args) {\\n        SpringApplication.run(BootstrapApplication.class, args);\\n    }\\n}\\n````\\n\\n### \u4e00\u5207\u5b8c\u6bd5\uff0c\u9a8c\u8bc1\u6d4b\u8bd5    \\n\\n\u901a\u8fc7\u4e0a\u9762\u7684\u6b65\u9aa4 \u6211\u4eec\u7684\u4e00\u4e2a\u5b8c\u6574\u529f\u80fd\u8ba4\u8bc1\u9274\u6743\u9879\u76ee\u5c31\u642d\u5efa\u5b8c\u6210\u4e86\uff0c\u6709\u540c\u5b66\u60f3 \u5c31\u8fd9\u51e0\u6b65\u9aa4 \u5b83\u7684\u5b8c\u6574\u529f\u80fd\u4f53\u73b0\u5728\u54ea\u91cc\u554a \u80fd\u652f\u6301\u5565\u3002  \\n\\n\u8fd9\u4e2a\u642d\u597d\u7684\u8ba4\u8bc1\u9274\u6743\u9879\u76ee\u57fa\u4e8erbac\u6743\u9650\u6a21\u578b\uff0c\u652f\u6301 baisc \u8ba4\u8bc1\uff0cdigest\u8ba4\u8bc1, jwt\u8ba4\u8bc1\u3002\u80fd\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\u7528\u6237\u5bf9\u540e\u53f0\u63d0\u4f9b\u7684restful api\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u5373\u54ea\u4e9b\u7528\u6237\u80fd\u8bbf\u95ee\u54ea\u4e9bapi\u3002 \u6211\u4eec\u8fd9\u91cc\u6765\u6d4b\u8bd5\u4e00\u4e0b\u3002 \\n\\nIDEA\u4e0a\u542f\u52a8\u5de5\u7a0b\u9879\u76ee\u3002  \\n\\n##### basic\u8ba4\u8bc1\u6d4b\u8bd5    \\n\\n\u8d44\u6e90api/v1/source2===get\u6ca1\u6709\u914d\u7f6e\u5230\u6587\u672c\u6570\u636e\u6e90\u91cc\uff0c\u4ee3\u8868\u6240\u6709\u89d2\u8272\u6216\u65e0\u89d2\u8272\u90fd\u53ef\u4ee5\u8bbf\u95ee \u524d\u63d0\u662f\u8ba4\u8bc1\u6210\u529f\uff0c\u7528\u8be5\u8d44\u6e90\u6765\u505a\u8ba4\u8bc1\u6d4b\u8bd5\\n\\n**\u8ba4\u8bc1\u6210\u529f**\uff1a  \\n\\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a09f6caa4ef845adb9f5b5fa6e86040b~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n\\n**\u5bc6\u7801\u9519\u8bef**\uff1a  \\n\\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/caa656a9a9174df6afc8768dc859ecb6~tplv-k3u1fbpfcp-zoom-1.image)\\n \\n\\n**\u8d26\u6237\u4e0d\u5b58\u5728**\uff1a  \\n\\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/37d8c0d0cd144b4fb8cfd5e0a47e6961~tplv-k3u1fbpfcp-zoom-1.image)\\n \\n\\n##### digest\u8ba4\u8bc1\u6d4b\u8bd5    \\n\\n**\u6ce8\u610f\u5982\u679c\u5bc6\u7801\u914d\u7f6e\u4e86\u52a0\u5bc6\u76d0\uff0c\u5219\u65e0\u6cd5\u4f7f\u7528digest\u8ba4\u8bc1**  \\n\\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/53fe5e08301c4171b31b6180a77b5837~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c12598db019549efa5f990c0136e7582~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n\\n\\n##### jwt\u8ba4\u8bc1\u6d4b\u8bd5    \\n\\njwt\u8ba4\u8bc1\u9996\u5148\u4f60\u5f97\u62e5\u6709\u4e00\u4e2a\u7b7e\u53d1\u7684jwt\uff0c\u521b\u5efa\u5982\u4e0bapi\u63a5\u53e3\u63d0\u4f9bjwt\u7b7e\u53d1- `/api/v1/account/auth`  \\n\\n````\\n@RestController()\\npublic class AccountController {\\n\\n    private static final String APP_ID = \\"appId\\";\\n    /**\\n     * account data provider\\n     */\\n    private SurenessAccountProvider accountProvider = new DocumentAccountProvider();\\n\\n    /**\\n     * login, this provider a get jwt api, convenient to test other api with jwt\\n     * @param requestBody request\\n     * @return response\\n     *\\n     */\\n    @PostMapping(\\"/api/v1/account/auth\\")\\n    public ResponseEntity<Object> login(@RequestBody Map<String,String> requestBody) {\\n        if (requestBody == null || !requestBody.containsKey(APP_ID)\\n                || !requestBody.containsKey(\\"password\\")) {\\n            return ResponseEntity.badRequest().build();\\n        }\\n        String appId = requestBody.get(\\"appId\\");\\n        String password = requestBody.get(\\"password\\");\\n        SurenessAccount account = accountProvider.loadAccount(appId);\\n        if (account == null || account.isDisabledAccount() || account.isExcessiveAttempts()) {\\n            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();\\n        }\\n        if (account.getPassword() != null) {\\n            if (account.getSalt() != null) {\\n                password = Md5Util.md5(password + account.getSalt());\\n            }\\n            if (!account.getPassword().equals(password)) {\\n                return ResponseEntity.status(HttpStatus.FORBIDDEN).build();\\n            }\\n        }\\n        // Get the roles the user has - rbac\\n        List<String> roles = account.getOwnRoles();\\n        long refreshPeriodTime = 36000L;\\n        // issue jwt\\n        String jwt = JsonWebTokenUtil.issueJwt(UUID.randomUUID().toString(), appId,\\n                \\"token-server\\", refreshPeriodTime >> 1, roles,\\n                null, Boolean.FALSE);\\n        Map<String, String> body = Collections.singletonMap(\\"token\\", jwt);\\n        return ResponseEntity.ok().body(body);\\n    }\\n\\n\\n}\\n````\\n\\n**\u8bf7\u6c42api\u63a5\u53e3\u767b\u5f55\u8ba4\u8bc1\u83b7\u53d6jwt**    \\n\\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3295df4eb54d4deb8498d3ae51aadcb8~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n\\n**\u643a\u5e26\u4f7f\u7528\u83b7\u53d6\u7684jwt\u503c\u8bf7\u6c42api\u63a5\u53e3**    \\n\\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec0f95fe506946df8b14c8fab5ffd9f2~tplv-k3u1fbpfcp-zoom-1.image)\\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb6b8c67ec474e229ba37e62654651d5~tplv-k3u1fbpfcp-zoom-1.image)\\n \\n\\n\\n##### \u9274\u6743\u6d4b\u8bd5  \\n\\n\u901a\u8fc7\u4e0a\u9762\u7684sureness.yml\u6587\u4ef6\u914d\u7f6e\u7684\u7528\u6237-\u89d2\u8272-\u8d44\u6e90\uff0c\u6211\u4eec\u53ef\u4ee5\u5173\u8054\u4e0b\u9762\u51e0\u4e2a\u5178\u578b\u6d4b\u8bd5\u70b9  \\n1. `/api/v1/source3===get`\u8d44\u6e90\u53ef\u4ee5\u88ab\u4efb\u4f55\u76f4\u63a5\u8bbf\u95ee\uff0c\u4e0d\u9700\u8981\u8ba4\u8bc1\u9274\u6743  \\n2. `api/v1/source2===get`\u8d44\u6e90\u6301\u6240\u6709\u89d2\u8272\u6216\u65e0\u89d2\u8272\u8bbf\u95ee \u524d\u63d0\u662f\u8ba4\u8bc1\u6210\u529f  \\n3. \u7528\u6237admin\u80fd\u8bbf\u95ee`/api/v1/source1===get`\u8d44\u6e90,\u800c\u7528\u6237root,tom\u65e0\u6743\u9650  \\n4. \u7528\u6237tom\u80fd\u8bbf`/api/v1/source1===delete`\u8d44\u6e90\uff0c\u800c\u7528\u6237admin.root\u65e0\u6743\u9650  \\n\u6d4b\u8bd5\u5982\u4e0b\uff1a  \\n\\n**`/api/v1/source3===get`\u8d44\u6e90\u53ef\u4ee5\u88ab\u4efb\u4f55\u76f4\u63a5\u8bbf\u95ee\uff0c\u4e0d\u9700\u8981\u8ba4\u8bc1\u9274\u6743**  \\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae2b3db8d7b64c9abf18c243943f7a4d~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n**`api/v1/source2===get`\u8d44\u6e90\u6301\u6240\u6709\u89d2\u8272\u6216\u65e0\u89d2\u8272\u8bbf\u95ee \u524d\u63d0\u662f\u8ba4\u8bc1\u6210\u529f**  \\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ace184c86cc5438f91f7614b961dfab1~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n**\u7528\u6237admin\u80fd\u8bbf\u95ee`/api/v1/source1===get`\u8d44\u6e90,\u800c\u7528\u6237root,tom\u65e0\u6743\u9650**  \\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5fcd36befa84fb59b49c3cc35cb206e~tplv-k3u1fbpfcp-zoom-1.image)\\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/45f9454365ef4a45abc90e436eb0d2f0~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n**\u7528\u6237tom\u80fd\u8bbf`/api/v1/source1===delete`\u8d44\u6e90\uff0c\u800c\u7528\u6237admin.root\u65e0\u6743\u9650**  \\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9bce40c97dd4aaf9924845922c4917b~tplv-k3u1fbpfcp-zoom-1.image)\\n![image](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/209598b7717947c585bf479817b24726~tplv-k3u1fbpfcp-zoom-1.image)\\n\\n\\n### \u5176\u4ed6  \\n\\n\u8fd9\u6b21\u56fe\u6587\u4e00\u6b65\u4e00\u6b65\u7684\u8be6\u7ec6\u63cf\u8ff0\u4e86\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u4f46\u5b8c\u6574\u7684\u8ba4\u8bc1\u9274\u6743\u9879\u76ee\u7684\u6d41\u7a0b\uff0c\u5f53\u7136\u91cc\u9762\u7684\u6388\u6743\u8d26\u6237\u7b49\u4fe1\u606f\u662f\u5199\u5728\u914d\u7f6e\u6587\u4ef6\u91cc\u9762\u7684\uff0c\u5b9e\u9645\u7684\u9879\u76ee\u662f\u4f1a\u628a\u8fd9\u4e9b\u6570\u636e\u5199\u5728\u6570\u636e\u5e93\u4e2d\u3002\\n\u4e07\u53d8\u4e0d\u79bb\u5176\u5b97\uff0c\u65e0\u8bba\u662f\u5199\u914d\u7f6e\u6587\u4ef6\u8fd8\u662f\u6570\u636e\u5e93\uff0c\u5b83\u53ea\u662f\u4f5c\u4e3a\u6570\u636e\u6e90\u63d0\u4f9b\u6570\u636e\uff0c\u57fa\u4e8esureness\u6211\u4eec\u4e5f\u80fd\u8f7b\u677e\u5feb\u901f\u6784\u5efa\u57fa\u4e8e\u6570\u636e\u5e93\u7684\u8ba4\u8bc1\u9274\u6743\u9879\u76ee\uff0c\u652f\u6301\u52a8\u6001\u5237\u65b0\u7b49\u5404\u79cd\u529f\u80fd\u3002  \\n\\n\u57fa\u4e8e\u6570\u636e\u5e93\u65b9\u6848\u7684\u9879\u76ee\u53ef\u53c2\u8003\u4e0b\u65b9\u6837\u4f8b->sureness\u96c6\u6210springboot\u6837\u4f8b(\u6570\u636e\u5e93\u65b9\u6848), \u6b64\u6b21\u4e00\u6b65\u4e00\u6b65\u5b8c\u6210\u7684\u7cfb\u7edf\u6e90\u4ee3\u7801\u4e5f\u5728\u4e0b\u65b9 -> sureness\u96c6\u6210springboot\u6837\u4f8b(\u914d\u7f6e\u6587\u4ef6\u65b9\u6848)   \\n\\n#### DEMO\u6e90\u4ee3\u7801\u4ed3\u5e93\\n\\n[sureness\u96c6\u6210springboot\u6837\u4f8b-\u914d\u7f6e\u6587\u4ef6\u65b9\u6848](https://github.com/dromara/sureness/tree/master/sample-bootstrap)        \\n[sureness\u96c6\u6210springboot\u6837\u4f8b-\u6570\u636e\u5e93\u65b9\u6848](https://github.com/dromara/sureness/tree/master/sample-tom)"},{"id":"/2021/04/29/sample-micronaut","metadata":{"permalink":"/sureness/zh-cn/blog/2021/04/29/sample-micronaut","editUrl":"https://github.com/dromara/sureness/edit/master/home/i18n/zh-cn/docusaurus-plugin-content-blog/2021-04-29-sample-micronaut.md","source":"@site/i18n/zh-cn/docusaurus-plugin-content-blog/2021-04-29-sample-micronaut.md","title":"Using Sureness to secure micronaut REST API","description":"Using Sureness to secure micronaut REST API by providing authentication(JWT,Basic,Digest) and authorization(RBAC)","date":"2021-04-29T00:00:00.000Z","formattedDate":"2021\u5e744\u670829\u65e5","tags":[{"label":"integrate","permalink":"/sureness/zh-cn/blog/tags/integrate"}],"readingTime":6.27,"hasTruncateMarker":true,"authors":[{"name":"ChineseTony","url":"https://github.com/ChineseTony","imageURL":"https://avatars.githubusercontent.com/u/24618786?s=400&v=4"}],"frontMatter":{"title":"Using Sureness to secure micronaut REST API","author":"ChineseTony","author_url":"https://github.com/ChineseTony","author_image_url":"https://avatars.githubusercontent.com/u/24618786?s=400&v=4","tags":["integrate"]},"prevItem":{"title":"\u4f7f\u7528Sureness\u4e00\u6b65\u4e00\u6b65\u642d\u5efa\u4e00\u4e2a\u5b8c\u6574\u8ba4\u8bc1\u9274\u6743\u9879\u76ee","permalink":"/sureness/zh-cn/blog/2021/06/06/step-by-step"},"nextItem":{"title":"Using Sureness to secure Javalin REST API","permalink":"/sureness/zh-cn/blog/2021/04/16/sample-javalin"}},"content":"Using Sureness to secure micronaut REST API by providing authentication(JWT,Basic,Digest) and authorization(RBAC)\\n\\n\x3c!--truncate--\x3e\\n\\n## What You Will Learn\\n\\n* Creating a simple REST API using micronaut\\n* Learn how to integrate Sureness into a micronaut application\\n* Test API authentication - use JWT Auth, Basic Auth, Digest Auth to test the security of the REST API\\n* Test API authorization - use different users to verify that they can access the REST API\\n\\n\\nThe tutorial assumes that you know what  JWT, Basic Auth, Digest Auth, RBAC are. If you\\ndo not, then you can check [jwt](https://jwt.io/introduction/), [basic auth](https://docs.oracle.com/cd/E50612_01/doc.11122/user_guide/content/authn_http_basic.html) , [digest auth](https://docs.oracle.com/cd/E50612_01/doc.11122/user_guide/content/authn_http_digest.html), [rbac](https://en.wikipedia.org/wiki/Role-based_access_control) for an introduction.\\n\\n## Setting Up Dependencies\\n\\nFirst, you will need to create a maven project and add micronautn, Sureness dependencies coordinate\\n\\n````\\n\\n    <properties>\\n        <release.version>8</release.version>\\n        <maven.compiler.source>1.8</maven.compiler.source>\\n        <maven.compiler.target>1.8</maven.compiler.target>\\n        <packaging>jar</packaging>\\n        <jdk.version>1.8</jdk.version>\\n        <micronaut.version>2.4.3</micronaut.version>\\n        <micronaut-maven-plugin.version>1.1.8</micronaut-maven-plugin.version>\\n        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>\\n        <exec.mainClass>com.usthe.sureness.micronaut.Application</exec.mainClass>\\n        <micronaut.runtime>netty</micronaut.runtime>\\n    </properties>\\n\\n    <dependencyManagement>\\n        <dependencies>\\n            <dependency>\\n                <groupId>io.micronaut</groupId>\\n                <artifactId>micronaut-bom</artifactId>\\n                <version>${micronaut.version}</version>\\n                <type>pom</type>\\n                <scope>import</scope>\\n            </dependency>\\n        </dependencies>\\n    </dependencyManagement>\\n\\n    <dependencies>\\n        <dependency>\\n            <groupId>org.slf4j</groupId>\\n            <artifactId>slf4j-simple</artifactId>\\n            <version>1.7.30</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>com.usthe.sureness</groupId>\\n            <artifactId>sureness-core</artifactId>\\n        </dependency>\\n        <dependency>\\n            <groupId>io.micronaut</groupId>\\n            <artifactId>micronaut-inject</artifactId>\\n            <scope>compile</scope>\\n        </dependency>\\n        <dependency>\\n            <groupId>io.micronaut</groupId>\\n            <artifactId>micronaut-validation</artifactId>\\n            <scope>compile</scope>\\n        </dependency>\\n        <dependency>\\n            <groupId>ch.qos.logback</groupId>\\n            <artifactId>logback-classic</artifactId>\\n            <scope>runtime</scope>\\n        </dependency>\\n        <dependency>\\n            <groupId>org.junit.jupiter</groupId>\\n            <artifactId>junit-jupiter-api</artifactId>\\n            <scope>test</scope>\\n        </dependency>\\n        <dependency>\\n            <groupId>org.junit.jupiter</groupId>\\n            <artifactId>junit-jupiter-engine</artifactId>\\n            <scope>test</scope>\\n        </dependency>\\n        <dependency>\\n            <groupId>io.micronaut.test</groupId>\\n            <artifactId>micronaut-test-junit5</artifactId>\\n            <scope>test</scope>\\n        </dependency>\\n        <dependency>\\n            <groupId>io.micronaut</groupId>\\n            <artifactId>micronaut-http-client</artifactId>\\n            <scope>compile</scope>\\n        </dependency>\\n        <dependency>\\n            <groupId>io.micronaut</groupId>\\n            <artifactId>micronaut-http-server-netty</artifactId>\\n            <scope>compile</scope>\\n        </dependency>\\n        <dependency>\\n            <groupId>io.micronaut</groupId>\\n            <artifactId>micronaut-runtime</artifactId>\\n            <scope>compile</scope>\\n        </dependency>\\n    </dependencies>\\n\\n    <build>\\n\\n        <plugins>\\n            <plugin>\\n                <groupId>io.micronaut.build</groupId>\\n                <artifactId>micronaut-maven-plugin</artifactId>\\n                <version>${micronaut-maven-plugin.version}</version>\\n            </plugin>\\n            <plugin>\\n                <groupId>org.apache.maven.plugins</groupId>\\n                <artifactId>maven-compiler-plugin</artifactId>\\n                <version>${maven-compiler-plugin.version}</version>\\n                <configuration>\\n                    <annotationProcessorPaths combine.children=\\"append\\">\\n                        <path>\\n                            <groupId>io.micronaut</groupId>\\n                            <artifactId>micronaut-inject-java</artifactId>\\n                            <version>${micronaut.version}</version>\\n                        </path>\\n                        <path>\\n                            <groupId>io.micronaut</groupId>\\n                            <artifactId>micronaut-validation</artifactId>\\n                            <version>${micronaut.version}</version>\\n                        </path>\\n                    </annotationProcessorPaths>\\n                    <compilerArgs>\\n                        <arg>-Amicronaut.processing.group=com.usthe.sureness</arg>\\n                        <arg>-Amicronaut.processing.module=micronaut-sureness</arg>\\n                    </compilerArgs>\\n                </configuration>\\n            </plugin>\\n        </plugins>\\n    </build>\\n\\n\\n     \\n````\\n\\n\\n- [User Guide](https://docs.micronaut.io/2.4.3/guide/index.html)\\n- [API Reference](https://docs.micronaut.io/2.4.3/api/index.html)\\n- [Configuration Reference](https://docs.micronaut.io/2.4.3/guide/configurationreference.html)\\n- [Micronaut Guides](https://guides.micronaut.io/index.html)\\n\\nWe need to create a simple micronautn app and provide some  REST API for test.\\n\\n\\n\\n## Setting Up Sureness\\n\\n#### 1.Run Micronaut Application\\n\\n```\\n  \\nimport io.micronaut.runtime.Micronaut;\\n\\n\\npublic class Application{\\n\\n    public static void main(String[] args) {\\n        Micronaut.run(Application.class, args);\\n\\n    }\\n}\\n\\n```\\n\\n####  2. Config Document Datasource - `sureness.yml`\\n\\nSureness authentication requires us to provide our own account data, role permission data. These data may come from document, databases,, annotations, etc. When we use sureness default configuration above, the datasource is document - `sureness.yml`.\\n\\nCreate a file named `sureness.yml` in the `resource` directory. Configure account data, role permission data in the `sureness.yml`.  eg:\\n\\n````yaml\\n## -- sureness.yml document dataSource-- ##\\n\\n# load api resource which need be protected, config role who can access these resource.\\n# resources that are not configured are also authenticated and protected by default, but not authorized\\n# eg: /api/v2/host===post===[role2,role3] means /api/v2/host===post can be access by role2,role3\\n# eg: /api/v1/source2===get===[] means /api/v1/source2===get can not be access by any role\\nresourceRole:\\n  - /api/v1/source1===get===[role2]\\n  - /api/v1/source1===post===[role1]\\n  - /api/v1/source1===delete===[role3]\\n  - /api/v1/source1===put===[role1,role2]\\n  - /api/v1/source2===get===[]\\n  - /api/v2/host===post===[role2,role3]\\n  - /api/v2/host===get===[role2,role3]\\n  - /api/v2/host===delete===[role2,role3]\\n  - /api/v2/host===put===[role2,role3]\\n  - /api/v3/*===*===[role1,role2,role3]\\n\\n# load api resource which do not need be protected, means them need be excluded.\\n# these api resource can be access by everyone\\nexcludedResource:\\n  - /api/v3/host===get\\n  - /**/*.html===get\\n  - /**/*.js===get\\n  - /**/*.css===get\\n  - /**/*.ico===get\\n\\n# account info\\n# there are three account: admin, root, tom\\n# eg: admin has [role1,role2] ROLE, unencrypted password is admin, encrypted password is 0192023A7BBD73250516F069DF18B500\\n# eg: root has role1, unencrypted password is 23456\\n# eg: tom has role3, unencrypted password is 32113\\naccount:\\n  - appId: admin\\n    # if add salt, the password is encrypted password - the result: MD5(password+salt)\\n    # digest auth not support encrypted password\\n    # if no salt, the password is unencrypted password\\n    credential: 0192023A7BBD73250516F069DF18B500\\n    salt: 123\\n    role: [role1,role2]\\n  - appId: root\\n    credential: 23456\\n    role: [role1,role2]\\n  - appId: tom\\n    credential: 32113\\n    role: [role3]\\n\\n````\\n\\n\\n\\n####  3. Add an Interceptor Intercepting All Requests\\n\\nThe essence of sureness is to intercept all rest requests for authenticating and authorizing.     The interceptor can be a filter or interceptor, it intercepts all request to check them. In Micronaut, we use Filter\\n```java\\n@Filter(\\"/**\\")\\npublic class MicronautSurenessFilterExample  implements HttpServerFilter {\\n\\n    private static final Logger logger = LoggerFactory.getLogger(MicronautSurenessFilterExample.class);\\n\\n    @Inject\\n    private SurenessSecurityManager securityManager ;\\n\\n\\n    @Override\\n    public Publisher<MutableHttpResponse<?>> doFilter(HttpRequest<?> request,\\n                                                             ServerFilterChain chain) {\\n        Integer statusCode = null;\\n        String errorMsg = null;\\n        try {\\n            SubjectSum subject =securityManager.checkIn(request);\\n            if (subject != null) {\\n                SurenessContextHolder.bindSubject(subject);\\n            }\\n        } catch (ProcessorNotFoundException | UnknownAccountException | UnsupportedSubjectException e4) {\\n            logger.debug(\\"this request is illegal\\");\\n            statusCode = HttpStatus.BAD_REQUEST.getCode();\\n            errorMsg = e4.getMessage();\\n        } catch (DisabledAccountException | ExcessiveAttemptsException e2 ) {\\n            logger.debug(\\"the account is disabled\\");\\n            statusCode = HttpStatus.FORBIDDEN.getCode();\\n            errorMsg = e2.getMessage();\\n        } catch (IncorrectCredentialsException | ExpiredCredentialsException e3) {\\n            logger.debug(\\"this account credential is incorrect or expired\\");\\n            statusCode = HttpStatus.FORBIDDEN.getCode();\\n            errorMsg = e3.getMessage();\\n        } catch (UnauthorizedException e5) {\\n            logger.debug(\\"this account can not access this resource\\");\\n            statusCode = HttpStatus.FORBIDDEN.getCode();\\n            errorMsg = e5.getMessage();\\n        } catch (RuntimeException e) {\\n            logger.error(\\"other exception happen: \\", e);\\n            statusCode = HttpStatus.FORBIDDEN.getCode();\\n            errorMsg = e.getMessage();\\n        }\\n        if (statusCode != null && errorMsg != null) {\\n            String finalErrorMsg = errorMsg;\\n            Integer finalStatusCode = statusCode;\\n            logger.info(statusCode+\\"---\x3e\\"+errorMsg);\\n            try {\\n                URI location = new URI(\\"/auth/error\\");\\n                request = request.mutate().headers(httpHeaders -> {\\n                    httpHeaders.add(\\"statusCode\\", String.valueOf(finalStatusCode));\\n                    httpHeaders.add(\\"errorMsg\\", finalErrorMsg);\\n                }).uri(location);\\n            }catch (URISyntaxException e){\\n                logger.error(\\"uri error\\");\\n            }\\n        }\\n        return chain.proceed(request);\\n    }\\n\\n\\n\\n    @Override\\n    public int getOrder() {\\n        return ServerFilterPhase.SECURITY.order();\\n    }\\n\\n\\n}\\n```\\nSurenessSecurityManager configuration\\n\\n```java\\nimport io.micronaut.context.annotation.Factory;\\n\\n@Factory\\npublic class SurenessConfiguration {\\n    private static final Logger logger = LoggerFactory.getLogger(SurenessConfiguration.class);\\n\\n    @Factory\\n    public SurenessSecurityManager init() {\\n        SurenessAccountProvider accountProvider = new DocumentAccountProvider();\\n        List<Processor> processorList = new LinkedList<>();\\n        NoneProcessor noneProcessor = new NoneProcessor();\\n        processorList.add(noneProcessor);\\n        PasswordProcessor passwordProcessor = new PasswordProcessor();\\n        passwordProcessor.setAccountProvider(accountProvider);\\n        processorList.add(passwordProcessor);\\n        DefaultProcessorManager processorManager = new DefaultProcessorManager(processorList);\\n        if (logger.isDebugEnabled()) {\\n            logger.debug(\\"DefaultProcessorManager init\\");\\n        }\\n        PathTreeProvider pathTreeProvider = new DocumentPathTreeProvider();\\n        DefaultPathRoleMatcher pathRoleMatcher = new DefaultPathRoleMatcher();\\n        pathRoleMatcher.setPathTreeProvider(pathTreeProvider);\\n        pathRoleMatcher.buildTree();\\n        if (logger.isDebugEnabled()) {\\n            logger.debug(\\"DefaultPathRoleMatcher init\\");\\n        }\\n\\n        // SubjectFactory init\\n        SubjectFactory subjectFactory = new SurenessSubjectFactory();\\n        List<SubjectCreate> subjectCreates = Arrays.asList(\\n                new NoneSubjectReactiveCreator(),\\n                new BasicSubjectReactiveCreator());\\n        subjectFactory.registerSubjectCreator(subjectCreates);\\n        if (logger.isDebugEnabled()) {\\n            logger.debug(\\"SurenessSubjectFactory init\\");\\n        }\\n\\n        // surenessSecurityManager init\\n        SurenessSecurityManager securityManager = SurenessSecurityManager.getInstance();\\n        securityManager.setPathRoleMatcher(pathRoleMatcher);\\n        securityManager.setSubjectFactory(subjectFactory);\\n        securityManager.setProcessorManager(processorManager);\\n        if (logger.isDebugEnabled()) {\\n            logger.debug(\\"SurenessSecurityManager init\\");\\n        }\\n        return securityManager;\\n    }\\n\\n}\\n\\n\\n```\\n\\n#### 4. Last, Implement Auth Exception Handling Process\\n\\nSureness uses exception handling process:\\n\\n- If auth success, method - `checkIn()` will return a `SubjectSum` object containing user information.\\n- If auth failure, method - `checkIn()` will throw different types of auth exceptions.\\n\\nWe need to continue the subsequent process based on these exceptions.(eg: return the request response)\\n\\nHere we need to customize the exceptions thrown by `checkIn`, passed directly when auth success, catch exception when auth failure and do something:\\n\\n````\\n// when auth error , add error msg to HttpRequest\\n   if (statusCode != null && errorMsg != null) {\\n            String finalErrorMsg = errorMsg;\\n            Integer finalStatusCode = statusCode;\\n            logger.info(statusCode+\\"---\x3e\\"+errorMsg);\\n            try {\\n                URI location = new URI(\\"/auth/error\\");\\n                request = request.mutate().headers(httpHeaders -> {\\n                    httpHeaders.add(\\"statusCode\\", String.valueOf(finalStatusCode));\\n                    httpHeaders.add(\\"errorMsg\\", finalErrorMsg);\\n                }).uri(location);\\n            }catch (URISyntaxException e){\\n                logger.error(\\"uri error\\");\\n            }\\n        } \\n\\n````\\n\\n\\n**All done, we can test now!**\\n\\n## Test\\n\\nThrough the above steps, a complete auth function project is completed. Someone maybe think that with only these few steps, where is its complete function and what can it support?   \\nThis built project is based on the RBAC permission model and supports Baisc authentication, Digest authentication and JWT authentication. It can fine-grained control the user\'s access to the restful api provided by the Javalin. That is to control which users can access which api.\\n\\nLet\'s test it. (we use postman and chrome to test.)\\n\\n### Test Authentication\\n\\n####  1. Basic Auth Test\\n\\nUse postman Basic auth, as shown below:\\n\\n* success - input username: admin, password: admin\\n\\n![success](/img/docs/micronaut/success.png)\\n\\n\\n* fail - input username: admin, password: admin1234\\n\\n![fail](/img/docs/micronaut/error.png)\\n\\n\\n## Conclusion\\n\\nmicronaut is a framework dedicated to simplicity and ease of use, and so is Sureness.  \\nWe hope you enjoy this tutorial. Of course, the tutorial only introduces a simple introduction. Our account data, role permission data can not only be written in `sureness.yml`, but also loaded and obtained from the database and annotations. We can also customize the authentication method, data source, etc.   \\nFinally, thank you again for reading.\\n\\n[DEMO SOURCE CODE ON GITHUB](https://github.com/usthe/sureness/tree/master/samples/javalin-sureness)"},{"id":"/2021/04/16/sample-javalin","metadata":{"permalink":"/sureness/zh-cn/blog/2021/04/16/sample-javalin","editUrl":"https://github.com/dromara/sureness/edit/master/home/i18n/zh-cn/docusaurus-plugin-content-blog/2021-04-16-sample-javalin.md","source":"@site/i18n/zh-cn/docusaurus-plugin-content-blog/2021-04-16-sample-javalin.md","title":"Using Sureness to secure Javalin REST API","description":"javalin-sureness sample repository","date":"2021-04-16T00:00:00.000Z","formattedDate":"2021\u5e744\u670816\u65e5","tags":[{"label":"integrate","permalink":"/sureness/zh-cn/blog/tags/integrate"}],"readingTime":6.36,"hasTruncateMarker":true,"authors":[{"name":"tom","title":"Java Engineer","url":"https://github.com/tomsun28","imageURL":"https://avatars.githubusercontent.com/u/24788200?s=400&v=4"}],"frontMatter":{"title":"Using Sureness to secure Javalin REST API","author":"tom","author_title":"Java Engineer","author_url":"https://github.com/tomsun28","author_image_url":"https://avatars.githubusercontent.com/u/24788200?s=400&v=4","tags":["integrate"]},"prevItem":{"title":"Using Sureness to secure micronaut REST API","permalink":"/sureness/zh-cn/blog/2021/04/29/sample-micronaut"}},"content":"[javalin-sureness sample repository](https://github.com/tomsun28/sureness/tree/master/samples/javalin-sureness)\\n\\nUsing Sureness to secure Javalin REST API by providing authentication(JWT,Basic,Digest) and authorization(RBAC)\\n\\n\x3c!--truncate--\x3e\\n\\n## What You Will Learn\\n\\n* Creating a simple REST API using Javalin\\n* Learn how to integrate Sureness into a Javalin application\\n* Learn how to issue a JWT\\n* Test API authentication - use JWT Auth, Basic Auth, Digest Auth to test the security of the REST API\\n* Test API authorization - use different users to verify that they can access the REST API\\n\\n\\nThe tutorial assumes that you know what  JWT, Basic Auth, Digest Auth, RBAC are. If you\\ndo not, then you can check [jwt](https://jwt.io/introduction/), [basic auth](https://docs.oracle.com/cd/E50612_01/doc.11122/user_guide/content/authn_http_basic.html) , [digest auth](https://docs.oracle.com/cd/E50612_01/doc.11122/user_guide/content/authn_http_digest.html), [rbac](https://en.wikipedia.org/wiki/Role-based_access_control) for an introduction.\\n\\n## Setting Up Dependencies\\n\\nFirst, you will need to create a maven project and add Javalin, Sureness dependencies coordinate\\n\\n````\\n        <dependency>\\n            <groupId>io.javalin</groupId>\\n            <artifactId>javalin</artifactId>\\n            <version>{{site.javalinversion}}</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>com.usthe.sureness</groupId>\\n            <artifactId>sureness-core</artifactId>\\n            <version>1.0.2</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>org.slf4j</groupId>\\n            <artifactId>slf4j-simple</artifactId>\\n            <version>1.7.30</version>\\n        </dependency>\\n````\\n\\n\\n## Setting Up Javalin and Create REST API\\n\\nWe need to create a simple Javalin app and provide some  REST API for test.\\n\\n```\\n        // init javalin\\n        Javalin app = Javalin.create().start(8088);\\n```\\n\\n```\\n        // create simple rest api\\n        // simple rest api\\n        app.routes(() ->\\n            path(\\"api\\", () -> {\\n                path(\\"v3\\", () -> {\\n                    get(\\"host\\", ctx -> ctx.result(\\"get /api/v3/host success\\"));\\n                    put(\\"book\\", ctx -> ctx.result(\\"put /api/v3/book success\\"));\\n                });\\n                path(\\"v2\\", () -> {\\n                    path(\\"host\\", () -> {\\n                        get(ctx -> ctx.result(\\"get /api/v2/host success\\"));\\n                        post(ctx -> ctx.result(\\"post /api/v2/host success\\"));\\n                        put(ctx -> ctx.result(\\"put /api/v2/host success\\"));\\n                        delete(ctx -> ctx.result(\\"delete /api/v2/host success\\"));\\n                    });\\n                });\\n                path(\\"v1\\", () -> {\\n                    path(\\"source1\\", () -> {\\n                        get(ctx -> ctx.result(\\"get /api/v1/source1 success\\"));\\n                        post(ctx -> ctx.result(\\"post /api/v1/source1 success\\"));\\n                        put(ctx -> ctx.result(\\"put /api/v1/source1 success\\"));\\n                        delete(ctx -> ctx.result(\\"delete /api/v1/source1 success\\"));\\n                    });\\n                });\\n            }));\\n```\\n\\n\\n## Setting Up Sureness\\n\\n#### 1. Use the Default Configuration to Configure Sureness\\n\\nThe default configuration -`DefaultSurenessConfig` uses the document datasource `sureness.yml` as the auth datasource.  \\nIt supports JWT, Basic Auth, Digest Auth authentication.\\n```\\n    public static void main(String[] args) {\\n        // init sureness default config\\n        new DefaultSurenessConfig();\\n    }\\n```\\n\\n####  2. Config Document Datasource - `sureness.yml`\\n\\nSureness authentication requires us to provide our own account data, role permission data. These data may come from document, databases,, annotations, etc. When we use sureness default configuration above, the datasource is document - `sureness.yml`.\\n\\nCreate a file named `sureness.yml` in the `resource` directory. Configure account data, role permission data in the `sureness.yml`.  eg:\\n\\n````yaml\\n## -- sureness.yml document dataSource-- ##\\n\\n# load api resource which need be protected, config role who can access these resource.\\n# resources that are not configured are also authenticated and protected by default, but not authorized\\n# eg: /api/v2/host===post===[role2,role3] means /api/v2/host===post can be access by role2,role3\\n# eg: /api/v1/source2===get===[] means /api/v1/source2===get can not be access by any role\\nresourceRole:\\n  - /api/v1/source1===get===[role2]\\n  - /api/v1/source1===post===[role1]\\n  - /api/v1/source1===delete===[role3]\\n  - /api/v1/source1===put===[role1,role2]\\n  - /api/v1/source2===get===[]\\n  - /api/v2/host===post===[role2,role3]\\n  - /api/v2/host===get===[role2,role3]\\n  - /api/v2/host===delete===[role2,role3]\\n  - /api/v2/host===put===[role2,role3]\\n  - /api/v3/*===*===[role1,role2,role3]\\n\\n# load api resource which do not need be protected, means them need be excluded.\\n# these api resource can be access by everyone\\nexcludedResource:\\n  - /api/v3/host===get\\n  - /**/*.html===get\\n  - /**/*.js===get\\n  - /**/*.css===get\\n  - /**/*.ico===get\\n\\n# account info\\n# there are three account: admin, root, tom\\n# eg: admin has [role1,role2] ROLE, unencrypted password is admin, encrypted password is 0192023A7BBD73250516F069DF18B500\\n# eg: root has role1, unencrypted password is 23456\\n# eg: tom has role3, unencrypted password is 32113\\naccount:\\n  - appId: admin\\n    # if add salt, the password is encrypted password - the result: MD5(password+salt)\\n    # digest auth not support encrypted password\\n    # if no salt, the password is unencrypted password\\n    credential: 0192023A7BBD73250516F069DF18B500\\n    salt: 123\\n    role: [role1,role2]\\n  - appId: root\\n    credential: 23456\\n    role: [role1,role2]\\n  - appId: tom\\n    credential: 32113\\n    role: [role3]\\n\\n````\\n\\n\\n\\n####  3. Add an Interceptor Intercepting All Requests\\n\\nThe essence of sureness is to intercept all rest requests for authenticating and authorizing.     The interceptor can be a filter or interceptor, it intercepts all request to check them. In Javalin, we use `app.before()`.\\n\\n```\\n        // intercept all rest requests for authenticating and authorizing\\n        app.before(ctx -> {\\n            SubjectSum subject = SurenessSecurityManager.getInstance().checkIn(ctx.req);\\n            // when auth error , the exception throw, you should use app.exception() catch it and define return\\n            if (subject != null) {\\n                SurenessContextHolder.bindSubject(subject);\\n            }\\n        });\\n\\n        app.after(ctx ->  SurenessContextHolder.unbindSubject());\\n\\n```\\n\\n#### 4. Last, Implement Auth Exception Handling Process\\n\\nSureness uses exception handling process:\\n\\n- If auth success, method - `checkIn()` will return a `SubjectSum` object containing user information.\\n- If auth failure, method - `checkIn()` will throw different types of auth exceptions.\\n\\nWe need to continue the subsequent process based on these exceptions.(eg: return the request response)\\n\\nHere we need to customize the exceptions thrown by `checkIn`, passed directly when auth success, catch exception when auth failure and do something:\\n\\n````\\n        // when auth error , the exception throw, you should use app.exception() catch it and define return\\n        app.exception(UnknownAccountException.class, (e, ctx) -> {\\n            log.debug(\\"this request user account not exist\\");\\n            ctx.status(401).result(e.getMessage());\\n        }).exception(IncorrectCredentialsException.class, (e, ctx) -> {\\n            log.debug(\\"this account credential is incorrect\\");\\n            ctx.status(401).result(e.getMessage());\\n        }).exception(ExpiredCredentialsException.class, (e, ctx) -> {\\n            log.debug(\\"this account credential expired\\");\\n            ctx.status(401).result(e.getMessage());\\n        }).exception(NeedDigestInfoException.class, (e, ctx) -> {\\n            log.debug(\\"you should try once again with digest auth information\\");\\n            ctx.status(401).header(\\"WWW-Authenticate\\", e.getAuthenticate());\\n        }).exception(UnauthorizedException.class, (e, ctx) -> {\\n            log.debug(\\"this account can not access this resource\\");\\n            ctx.status(403).result(e.getMessage());\\n        }).exception(Exception.class, (e, ctx) -> {\\n            log.error(\\"other exception happen: \\", e);\\n            ctx.status(500).result(e.getMessage());\\n        });\\n\\n````\\n\\n\\n## Provide an Issue JWT Api\\n\\nNow we provide a REST API to issue JWT. We can use this JWT to test JWT auth.\\n\\n````\\n       // issue jwt rest api\\n        app.get(\\"/auth/token\\", ctx -> {\\n            SubjectSum subjectSum = SurenessContextHolder.getBindSubject();\\n            if (subjectSum == null) {\\n                ctx.result(\\"Please auth!\\");\\n            } else {\\n                String principal = (String) subjectSum.getPrincipal();\\n                List<String> roles = (List<String>) subjectSum.getRoles();\\n                // issue jwt\\n                String jwt = JsonWebTokenUtil.issueJwt(UUID.randomUUID().toString(), principal,\\n                        \\"token-server\\", 3600L, roles);\\n                ctx.result(jwt);\\n            }\\n        });\\n````\\n\\n**All done, we can test now!**\\n\\n## Test\\n\\nThrough the above steps, a complete auth function project is completed. Someone maybe think that with only these few steps, where is its complete function and what can it support?   \\nThis built project is based on the RBAC permission model and supports Baisc authentication, Digest authentication and JWT authentication. It can fine-grained control the user\'s access to the restful api provided by the Javalin. That is to control which users can access which api.\\n\\nLet\'s test it. (we use postman and chrome to test.)\\n\\n### Test Authentication\\n\\n####  1. Basic Auth Test\\n\\nUse postman Basic auth, as shown below:\\n\\n* success - input username: admin, password: admin\\n\\n![success](/img/docs/javalin/test1.PNG)\\n\\n\\n* fail - input username: admin, password: 12345\\n\\n![fail](/img/docs/javalin/test2.PNG)\\n\\n####  2. Digest Auth Test\\n\\nNote: If password has been encrypted,  Digest auth not support.(So the account admin not support Digest auth).  \\nUse chrome to Digest auth, as shown below:\\n\\n![success](/img/docs/javalin/test3.PNG)\\n\\n![success](/img/docs/javalin/test4.PNG)\\n\\n####  3. JWT Auth Test\\n\\nFirst, we should access **[GET /auth/token]** api to get a JWT to use, as shown below:\\n\\n![success](/img/docs/javalin/test5.PNG)\\n\\nThen, use the JWT as Bearer Token to access REST API, as shown below:\\n\\n![success](/img/docs/javalin/test6.PNG)\\n\\n\\n### Test Authorization\\n\\n* success - user **tom** has role **role3**, the api **[DELETE - /api/v2/host]** support **role3** access, so **tom** can access api **[DELETE - /api/v2/host]** success, as shown below:\\n\\n![success](/img/docs/javalin/test7.PNG)\\n\\n\\n* fail - user **tom** only has role **role3**, the api **[GET - /api/v1/source1]** only support **role2** access, not support **role3**,  so **tom** can not access api **[GET - /api/v1/source1]**, as shown below:\\n\\n![fail](/img/docs/javalin/test8.PNG)\\n\\n\\n## Conclusion\\n\\nJavalin is a framework dedicated to simplicity and ease of use, and so is Sureness.  \\nWe hope you enjoy this tutorial. Of course, the tutorial only introduces a simple introduction. Our account data, role permission data can not only be written in `sureness.yml`, but also loaded and obtained from the database and annotations. We can also customize the authentication method, data source, etc.   \\nFinally, thank you again for reading.\\n\\n[DEMO SOURCE CODE ON GITHUB](https://github.com/usthe/sureness/tree/master/samples/javalin-sureness)"}]}')}}]);